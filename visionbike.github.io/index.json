[{"categories":["Setup"],"content":"After a long time of saving money, I finally bought a high-end gaming laptop, not just for games but also for working. Somebody may wonder why I don’t build a powerful PC instead of a laptop. However, a high-end gaming laptop can be optimal when your job needs frequent movement or your room lacks space for a huge PC. My laptop is Lenovo 7 16IAX7 with Core i7 12800HX CPU, Geforce RTX 3070 Ti GPU and DDR5 16GB RAM. It’s a beast for games and deep learning (at least for testing my code)! Now when Windows 11 introduces Windows Subsystem Linux 2 (WSL2) with more support, we don’t need to install a different Linux system that you can struggle to install alongside Windows on your laptop. The GPU deep learning environment in Windows 11 can be consist of following steps. ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:0:0","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"1. Install WSL2 on Windows 11 Let’s install WSL2 on Windows 11. First, you open Windows PowerShell as Administrator mode and see which available Linux distributions for installation on WSL2 with following command: # list all Linux distribution available wsl --list --online This time we will install Ubuntu 22.04. # install Linux distribution Ubuntu wsl --install -d Ubuntu If you have many WSL distributions, you can set the default WSL distribution by following commands: # shutdown all wsl distributions wsl --shutdown # define default wsl distribution to use with wsl wsl -s \u003cDistributionName\u003e Note The WSL distrubution will be installed in system drive in default, if you want to locate your WSL distribution in a non-system drive, please read more in here. ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:1:0","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"2. Install Developement Tools Before installing the drivers and cuDNN, I suggest you update and install some necessary tools for your WSL distro. # update the system sudo apt update -y # upgrade the system sudo apt upgrade -y # install some development tools sudo apt install -y build-essential pkg-config # install additional tools sudo apt install -y curl wget uget tar zip unzip rar unrar # install python3 sudo apt install -y python3 python3-dev python3-pip python3-setuptools python3-venv # install git sudo apt install -y git git config --global user.name \"name\" git config --global user.email \"name@domain.com\" Note Copy your own Github SSH keys to ~/.ssh. ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:2:0","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"3 Install NVIDIA Graphics Drivers on Windows 11 I recommend installing GeForce Experience Drivers. GeForce Experience is a utility that manages the graphics drivers of NVIDIA’s GeForce family of products, optimizes them for various PC games, and provides recording capabilities. From checking for the latest drivers to installing, you can easily do it with the GUI. The download is available at this site. The graphics driver is installed at the same time that you install GeForce Experience. Reboot the computer before continuing the next step. ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:3:0","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"3. Install CUDA on WSL2 Once the graphics driver is installed, install CUDA. Suppose you select items according to the system at hand from CUDA Toolkit download site. In that case, it will suggest commands according to it. We will continue to execute the commands that have appeared. wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin sudo mv cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-wsl-ubuntu-12-1-local_12.1.0-1_amd64.deb sudo dpkg -i cuda-repo-wsl-ubuntu-12-1-local_12.1.0-1_amd64.deb sudo cp /var/cuda-repo-wsl-ubuntu-12-1-local/cuda-*-keyring.gpg /usr/share/keyrings/ sudo apt-get update sudo apt-get -y install cuda Finally, let’s add CUDA’s path to the system environment by adding the PATH and LD_LIBRARY_PATH variables to ~/.bashrc. nano ~/.bashrc # at the end of ~/.bashrc file export PATH=/usr/local/cuda/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH # Ctrl + S to save the modification # Ctrl + X to exit the editor # activate .bashrc file's change source .bashrc If it finishes successfully, CUDA operation is fine. ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:4:0","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"4. Install cuDNN cuDNN is a library for deep learning provided by NVIDIA. Since the calculation of neural networks is accelerated, it is an essential library for those who do deep learning. It can be downloaded from this site. You must participate in the NVIDIA Developer Program to download. When the download is completed, execute the following commands. tar -xvf cudnn-linux-x86_64-8.x.x.x_cuda.X.Y-archive.tar.xz sudo cp cudnn-*-archive/include/cudnn*.h /usr/local/cuda/include sudo cp -P cudnn-*-archive/lib/libcudnn* /usr/local/cuda/lib64 sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn* Next we will perform the installation. sudo dpkg -i cudnn-local-repo-[OS]-8.x.x.x_1.0-1_amd64.deb sudo cp /var/cudnn-local-repo-[OS]-8.x.x.x/cudnn-local-*-keyring.gpg /usr/share/keyrings/ sudo apt-get update sudo apt-get install libcudnn8=8.x.x.x-1+cudaX.Y sudo apt-get install libcudnn8-dev=8.x.x.x-1+cudaX.Y sudo apt-get install libcudnn8-samples=8.x.x.x-1+cudaX.Y Note 8.x.x.x and X.Y are the version of cuDNN and CUDA, while [OS] is the Operation System’s version. to make sure the correct version, you can check in /var/cudnn-local-repo-[OS]-8.x.x.x. Finally, check the operation of cuDNN. $ cp -r /usr/src/cudnn_samples_v8/ $HOME $ cd $HOME/cudnn_samples_v8/conv_sample $ make clean \u0026\u0026 make $ bash run_conv_sample A sample program to run convolution operation under multiple settings will work. If Test passed! is displayed, the installation is complete. Note If the test failed, the reason may be the ld-config connect wrong libcuda. To solve it, you may open Windows PowerShell as Administrator cd C:\\Windows\\System32\\lxss\\lib del libcuda.so del libcuda.so.1 # run wsl -e /bin/bash to open in WSL and create the symlink wsl -e /bin/bash ln -s libcuda.so.1.1 libcuda.so.1 ln -s libcuda.so.1.1 libcuda.so exit # back in PowerShell wsl --shudown # restart WSL wsl -e /bin/bash # check ldconfig sudo ldconfig Now you can rerun cudnn_samples_v8/conv_sample/run_conv_sample again to obtain Test passed!. ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:5:0","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"5. Install Mambaforge Mamba is a fast, robust, and cross-platform package manager. It can run on Windows, OS X, and Linux (ARM64 and PPC64LE included). In addition, it is fully compatible with conda packages and supports most of conda’s commands. For the Linux platform, you can download Mambaforge and then run the script for installation. # download the installer wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh\" # run the downloaded script bash Mambaforge-$(uname)-$(uname -m).sh Note If you’d prefer that conda’s base environment not be activated on startup, set the auto_activate_base parameter to false: mamba config --set auto_activate_base false Then close the current shell and open a new shell to activate the effect. Mambaforge comes with the popular conda-forge channel preconfigured. Still, you can modify the configuration to use any channel you like. ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:6:0","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"6. Setup Deep Learning Environement ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:7:0","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"6.1. PyTorch-GPU # create virtual env mamba create -n torchgpu python=3.10 # activate created venv mamba activate torchgpu # install necessary packages pip install --upgrade pip setuptools wheel mamba install pytorch torchvision torchaudio cudatoolkit=11.7 -c pytorch -c conda-forge mamba install pytorch-lightning mamba install scikit-learn scikit-image scipy mamba install matplotlib seaborn pip install pandas pip install --upgrade opencv-python opencv-contrib-python mamba install tqdm yacs mamba install jupyter Verification $ mamba activate torchgpu (torchgpu) $ python \u003e\u003e\u003e import torch \u003e\u003e\u003e torch.cuda.is_available() \u003e\u003e\u003e exit() (torchgpu) $ mamba deactivat ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:7:1","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"6.2. Tensorflow-GPU mamba create -n tfgpu python=3.10 mamba activate tfgpu pip install --upgrade pip setuptools wheel mamba install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CONDA_PREFIX/lib/ pip install tensorflow mamba install scikit-learn scikit-image scipy mamba install matplotlib seaborn pip install pandas pip install --upgrade opencv-python opencv-contrib-python mamba install tqdm yacs Verification $ mamba activate tfgpu (tfgpu) $ python \u003e\u003e\u003e import tensorflow as tf \u003e\u003e\u003e from tensorflow.python.client import device_lib \u003e\u003e\u003e print(tf.config.list_physical_devices('GPU')) \u003e\u003e\u003e device_lib.list_local_devices() \u003e\u003e\u003e exit() (tfgpu) $ mamba deactivate ","date":"2023-02-23","objectID":"/setup-dl-environment-with-win11-and-wsl2/:7:2","tags":["installation","configuration"],"title":"Setup Deep Learning Environment With Windows 11 and WSL2","uri":"/setup-dl-environment-with-win11-and-wsl2/"},{"categories":["Setup"],"content":"Writing a personal blog is an exciting hobby when I can write my idea, take notes and share them with everyone. But no one wants to spend too much time building everything from scratch. After some searching, I got to know there are several static site generators out there, and the most used generators are Jekyll, Hexo, and Hugo. All of them work perfectly with GitHub Pages. I chose Hugo as my site generator, and it worked perfectly. Hugo is a static site generator written in Go. It is “the world’s fastest framework for building websites”, as stated in the official website and after using it I’ve nothing to complain about the speed. Besides, building a blog with Hugo is simple and easy. Here is how: ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:0:0","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":["Setup"],"content":"1. Requirements You can install latest version of  Hugo (\u003e 0.62.0) for your OS (Windows, Linux, macOS). Why not support earlier versions of Hugo? Since Markdown Render Hooks was introduced in the Hugo Christmas Edition, this theme only supports Hugo versions above 0.62.0. Hugo extended version is recommended Since some features of this theme need to processes  SCSS to  CSS, it is recommended to use Hugo extended version for better experience. I am using Ubuntu and the installation is quite simple: sudo apt install hugo To check the installation: hugo version The Hugo version should show up if the installation is successful. ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:1:0","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":["Setup"],"content":"2. Build Local Project And Connect To Github The following steps are here to help you initialize your new website on the local machine and instruct you to store the source code and deploy your website. ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:2:0","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":["Setup"],"content":"2.1. Create The Project In Local Machine Hugo provides a new command to create a new website: hugo new [USERNAME]-Hugo What is [USERNAME]? [USERNAME] is the your Github’s username. ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:2:1","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":["Setup"],"content":"2.2. Create Necessary Repositories On GitHub First, your need to create a new repository on GitHub with [USERNAME].github.io. This repository is the place to host your GitHub page. You also need a repository on Github to store your souce code and it also help you to automatic deploy your website via submodule. The source code repository should be named as [USERNAME]-Hugo for easily memorizing. Tip If you create a repository without a README file, it will be easy to avoid accidental history conflicts when pushing a local project to a fresh repo. We can always add one later. ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:2:2","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":["Setup"],"content":"2.3. Install the Theme Hugo provides plenty of free themes to decorate your website and make the configuration even more easier. You can access free Hugo themes via this website. In my blog, I chose the LoveIt theme because of its style and awesome features. To use the theme, you have to download its source code and locate the folder in themes. git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:2:3","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":["Setup"],"content":"2.4. Basic Configuration The following is a basic configuration for the my website, just modify as you want: # base URL baseURL = \"https://[USERNAME].github.io\" # site publish directory publishdir = \"[USERNAME].github.io\" # language code languageCode = 'en-us' # site title title = \"[USERNAME]\" # site theme theme = \"LoveIt\" themedir = \"themes\" Tip You should name publishdir as your hosting repository’s name, it will store your generated website. It will be setup as an submodule to live deploy your website to GitHub page. You can read more the LoveIt documentation to customize your wesite as your want. ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:2:4","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":["Setup"],"content":"2.5. Link Local Project to Repositories Before linking your Hugo project, add our hosting submodule to the project. Our goal is to separate the commit histories of our project source and our site built output to the publishdir directory. git submodule add https://github.com/[USERNAME]/[USERNAME].github.io.git /[USERNAME].github.io Let’s do a quick site build just to put something into the remote GitHub repo. # 1. Perform a site build and output to 'public/' directory. \u003e hugo # 2-4. \u003e cd [USERNAME].github.io \u003e git add . \u003e git commit -m \"first build\" # 5. Return to the project root. \u003e cd ../ # 6-7. \u003e git add . \u003e git commit -m \"first build - update submodule reference\" # 8. Push the source project *and* the public submodule to GitHub together. \u003e git push -u origin master --recurse-submodules=on-demand Note It is super important when we build to make sure that we commit and push both the [USERNAME].github.io submodule and the main project. For each submodule commit, the project updates its reference to the submodule to maintain its connection to the correct commit. The --recurse-submodules=on-demand command pushes all of the project modules at the same time. You can read more in this website to know the benefits and drawbacks when using submodule to deploy the GitHub page. ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:2:5","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":["Setup"],"content":"2.6. Create Your First Post Here is the way to create your first post: hugo new posts/first_post.md Feel free to edit the post file by adding some sample content and replacing the title value in the beginning of the file. Note By default all posts and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata, set the property draft: false or add -D/--buildDrafts parameter to hugo server command. To test the website on local machine, you can run the following command: hugo server -D --disableFastRender After completion, you just follow the instrustion in Section 2.5 to publish the post. To custom your post, you can read more the document of LoveIt Theme. ","date":"2023-02-23","objectID":"/build-personal-blog-with-gh-page/:2:6","tags":["installation","configuration"],"title":"Build Personal Blog With Github-Page","uri":"/build-personal-blog-with-gh-page/"},{"categories":null,"content":"Experience Research Assistant  Applied Computing and Multimedia Lab, National Yang-Ming Chiao-Tung University, Taiwan  Sept 2020 - Jan 2021 Research suppervised and unsuppervised-based approaches for digital image enhancement. Software Engineer  Lac Viet Computing Corporation, Vietnam  Sept 2017 - Aug 2018 Develop deep learning core of Question Answering System that using Restful API, and noSQL database (MongoDB) for Vietnamese Law. Develop a prototype version for a facial recognition-based timekeeping service. ","date":"2023-01-23","objectID":"/cv/:1:0","tags":null,"title":"Curriculum Vitae","uri":"/cv/"},{"categories":null,"content":"Education National Taiwan University of Science and Technology  Ph.D. Candidate, Electrical Engineering  2021 - now Study vision-based road anomaly detection, sEMG signal processing, and sEMG-based hand gesture recognition. National Taiwan University of Science and Technology  M.Sc., Computer Science and Information Engineering  2018 - 2020 Study small object detection and distance estimation for the ADAS system, chroma subsampling and upsampling in JPEG compression. Thesis: A Study on Optimal Chroma Subsampling and Upsampling Combination Methods for JPEG Image Reconstrsuction. ","date":"2023-01-23","objectID":"/cv/:2:0","tags":null,"title":"Curriculum Vitae","uri":"/cv/"},{"categories":null,"content":"Publications Hsu, M.-H.; Nguyen, P.T.-T.; Nguyen, D.-D.; Kuo, C.-H. Image Servo Tracking of a Flexible Manipulator Prototype with Connected Continuum Kinematic Modules. Actuators 2022, 11, 360. DOI: https://doi.org/10.3390/act11120360 Nguyen, T.-K.; Nguyen, P.T.-T.; Nguyen, D.-D.; Kuo, C.-H. Effective Free-Driving Region Detection for Mobile Robots by Uncertainty Estimation Using RGB-D Data. Sensors 2022, 22, 4751. DOI: https://doi.org/10.3390/s22134751 Nguyen, P.T.-T.; Yan, S.-W.; Liao, J.-F.; Kuo, C.-H. Autonomous Mobile Robot Navigation in Sparse LiDAR Feature Environments. Appl. Sci. 2021, 11, 5963. DOI: https://doi.org/10.3390/app11135963 Nguyen, A.-T.; Lu, S.-H.; Nguyen, P.T.T. Validating and Forecasting Carbon Emissions in the Framework of the Environmental Kuznets Curve: The Case of Vietnam. Energies 2021, 14, 3144. DOI: https://doi.org/10.3390/en14113144 Vo Hoai Viet, Nguyen Thanh Thien Phuc, Pham Minh Hoang, Liu Kim Nghia, \" Spatial-Temporal Shape and Motion Features for Dynamic Hand Gesture Recognition in Depth Video\", International Journal of Image, Graphics and Signal Processing(IJIGSP), Vol.10, No.9, pp. 17-26, 2018. DOI: http://doi.org/10.5815/ijigsp.2018.09.03 ","date":"2023-01-23","objectID":"/cv/:3:0","tags":null,"title":"Curriculum Vitae","uri":"/cv/"},{"categories":null,"content":"Phuc Thanh-Thien Nguyen (Felix Nguyen), EE Ph.D. CandidatePhuc Thanh-Thien Nguyen \" Phuc Thanh-Thien Nguyen (Felix Nguyen), EE Ph.D. Candidate I am Phuc Thanh-Thien Nguyen (Felix Nguyen), current working as Ph.D Candidate at Autonomous and Soft Robotics (ASR) Laboratory, National Taiwan University, Taiwan. I focus on computer vision, digital signal processing, machine learning and deep learning in various applications, such as bio-signal, semantic segmentation and object detection. ","date":"2023-01-23","objectID":"/about/:0:0","tags":null,"title":"About Visionbike","uri":"/about/"},{"categories":null,"content":"Welcome to my blog! In this blog, I will post small yet interesting notes of knowledge as well as state-of-the-art AI innovation, that I have found during my work as a researcher. I have done research on convolutional neural networks for computer-aided diagnosis and biosignal processing for various applications. In my current work, I am applying machine learning (supervised \u0026 unsupervised) and statistics to business problems. My go-to programming language is Python with the common data science and machine learning stack. Check out my CV and connect with me on Linkedin​ if you want to get in touch. ","date":"2023-01-23","objectID":"/about/:1:0","tags":null,"title":"About Visionbike","uri":"/about/"},{"categories":null,"content":"Disclaimer While I make every effort to ensure the information on this website is accurate and correct, I make no representations about the suitability of this content for any purposes. ","date":"2023-01-23","objectID":"/about/:2:0","tags":null,"title":"About Visionbike","uri":"/about/"}]